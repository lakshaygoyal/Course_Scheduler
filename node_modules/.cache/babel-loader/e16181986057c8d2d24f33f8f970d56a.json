{"ast":null,"code":"class SearchAndFilter {\n  searchAndFilter(courses, search, subject, minimumCredits, maximumCredits, interests) {\n    if (subject !== '' && search !== null) {\n      let coursesAfterSearch = [];\n\n      for (const course of courses) {\n        for (const keyword of course.keywords) {\n          if (keyword.includes(search)) {\n            coursesAfterSearch.push(course);\n            break;\n          }\n        }\n      }\n\n      courses = coursesAfterSearch;\n    }\n\n    if (subject !== 'All') {\n      let coursesAfterSubject = [];\n\n      for (const course of courses) {\n        if (course.subject === subject) coursesAfterSubject.push(course);\n      }\n\n      courses = coursesAfterSubject;\n    }\n\n    if (interests !== 'All') {\n      let coursesAfterSubject = [];\n\n      for (const course of courses) {\n        if (course.keywords.indexOf(interests) !== -1) {\n          coursesAfterSubject.push(course);\n        }\n\n        if (course.subject === interests) coursesAfterSubject.push(course);\n      }\n\n      courses = coursesAfterSubject;\n    }\n\n    if (minimumCredits !== '') {\n      let coursesAfterMinimumCredits = [];\n\n      for (const course of courses) {\n        if (course.credits >= parseInt(minimumCredits)) coursesAfterMinimumCredits.push(course);\n      }\n\n      courses = coursesAfterMinimumCredits;\n    }\n\n    if (maximumCredits !== '') {\n      let coursesAfterMaximumCredits = [];\n\n      for (const course of courses) {\n        if (course.credits <= parseInt(maximumCredits)) coursesAfterMaximumCredits.push(course);\n      }\n\n      courses = coursesAfterMaximumCredits;\n    }\n\n    return courses;\n  }\n\n}\n\nexport default SearchAndFilter;","map":{"version":3,"sources":["/Users/lakshaygoyal/Desktop/COMP SCI 639/react2-alpha-lakshaygoyal 2/src/SearchAndFilter.js"],"names":["SearchAndFilter","searchAndFilter","courses","search","subject","minimumCredits","maximumCredits","interests","coursesAfterSearch","course","keyword","keywords","includes","push","coursesAfterSubject","indexOf","coursesAfterMinimumCredits","credits","parseInt","coursesAfterMaximumCredits"],"mappings":"AAAA,MAAMA,eAAN,CAAsB;AACpBC,EAAAA,eAAe,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,cAA3B,EAA2CC,cAA3C,EAA2DC,SAA3D,EAAsE;AAGnF,QAAGH,OAAO,KAAK,EAAZ,IAAkBD,MAAM,KAAK,IAAhC,EAAsC;AACpC,UAAIK,kBAAkB,GAAG,EAAzB;;AAEA,WAAI,MAAMC,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,aAAI,MAAMQ,OAAV,IAAqBD,MAAM,CAACE,QAA5B,EACA;AACE,cAAGD,OAAO,CAACE,QAAR,CAAiBT,MAAjB,CAAH,EAA4B;AAC5BK,YAAAA,kBAAkB,CAACK,IAAnB,CAAwBJ,MAAxB;AACA;AACC;AACF;AACF;;AACDP,MAAAA,OAAO,GAAGM,kBAAV;AACD;;AAGD,QAAGJ,OAAO,KAAK,KAAf,EAAsB;AACpB,UAAIU,mBAAmB,GAAG,EAA1B;;AAEA,WAAI,MAAML,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACL,OAAP,KAAmBA,OAAtB,EACEU,mBAAmB,CAACD,IAApB,CAAyBJ,MAAzB;AACH;;AACDP,MAAAA,OAAO,GAAGY,mBAAV;AACD;;AACD,QAAGP,SAAS,KAAK,KAAjB,EAAwB;AACtB,UAAIO,mBAAmB,GAAG,EAA1B;;AAEA,WAAI,MAAML,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACE,QAAP,CAAgBI,OAAhB,CAAwBR,SAAxB,MAAuC,CAAC,CAA3C,EAA6C;AAC3CO,UAAAA,mBAAmB,CAACD,IAApB,CAAyBJ,MAAzB;AACD;;AACD,YAAGA,MAAM,CAACL,OAAP,KAAmBG,SAAtB,EACEO,mBAAmB,CAACD,IAApB,CAAyBJ,MAAzB;AACH;;AACDP,MAAAA,OAAO,GAAGY,mBAAV;AACD;;AAED,QAAGT,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIW,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMP,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACQ,OAAP,IAAkBC,QAAQ,CAACb,cAAD,CAA7B,EACEW,0BAA0B,CAACH,IAA3B,CAAgCJ,MAAhC;AACH;;AACDP,MAAAA,OAAO,GAAGc,0BAAV;AACD;;AAED,QAAGV,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIa,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMV,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACQ,OAAP,IAAkBC,QAAQ,CAACZ,cAAD,CAA7B,EACEa,0BAA0B,CAACN,IAA3B,CAAgCJ,MAAhC;AACH;;AACDP,MAAAA,OAAO,GAAGiB,0BAAV;AACD;;AAED,WAAOjB,OAAP;AACD;;AA/DmB;;AAkEtB,eAAeF,eAAf","sourcesContent":["class SearchAndFilter {\r\n  searchAndFilter(courses, search, subject, minimumCredits, maximumCredits, interests) {\r\n\r\n  \r\n    if(subject !== '' && search !== null) {\r\n      let coursesAfterSearch = [];\r\n\r\n      for(const course of courses) {\r\n        for(const keyword of course.keywords)\r\n        {\r\n          if(keyword.includes(search)){\r\n          coursesAfterSearch.push(course);\r\n          break;\r\n          }\r\n        } \r\n      }\r\n      courses = coursesAfterSearch;\r\n    }\r\n\r\n\r\n    if(subject !== 'All') {\r\n      let coursesAfterSubject = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.subject === subject)\r\n          coursesAfterSubject.push(course);\r\n      }\r\n      courses = coursesAfterSubject;\r\n    }\r\n    if(interests !== 'All') {\r\n      let coursesAfterSubject = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.keywords.indexOf(interests) !== -1){\r\n          coursesAfterSubject.push(course);\r\n        }\r\n        if(course.subject === interests)\r\n          coursesAfterSubject.push(course);\r\n      }\r\n      courses = coursesAfterSubject;\r\n    }\r\n\r\n    if(minimumCredits !== '') {\r\n      let coursesAfterMinimumCredits = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.credits >= parseInt(minimumCredits))\r\n          coursesAfterMinimumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMinimumCredits;\r\n    }\r\n\r\n    if(maximumCredits !== '') {\r\n      let coursesAfterMaximumCredits = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.credits <= parseInt(maximumCredits))\r\n          coursesAfterMaximumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMaximumCredits;\r\n    }\r\n\r\n    return courses;\r\n  }\r\n}\r\n\r\nexport default SearchAndFilter;\r\n"]},"metadata":{},"sourceType":"module"}