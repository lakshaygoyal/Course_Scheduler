{"ast":null,"code":"var _jsxFileName = \"/Users/lakshaygoyal/Desktop/react2-alpha-lakshaygoyal 2/src/Recommender.js\";\nimport React from 'react';\nimport './App.css';\nimport RecommendedCourse from './RecommendedCourse';\n\nclass Recommender extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recommendedCourses: [] // this.rating = React.createRef();\n\n    };\n  }\n\n  getInterests(data) {\n    let interests = [];\n    interests.push(\"All\");\n\n    for (let i = 0; i < data.length; i++) {\n      data[i].keywords.forEach(keyword => {\n        if (interests.indexOf(keyword) === -1) interests.push(keyword);\n      });\n      if (interests.indexOf(data[i].subject) === -1) interests.push(data[i].subject);\n    }\n\n    return interests;\n  }\n\n  showCourses(courses) {\n    let temp = [];\n    courses.forEach(course => {\n      temp.push(React.createElement(RecommendedCourse, {\n        data: course,\n        interest: course.interest,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }));\n    });\n    return temp;\n  }\n\n  getRecommended() {\n    let tempRecommended = [];\n    let ratedCourses = this.props.ratedCourses;\n    let allCourses = this.props.allCourses;\n    let completedCourses = this.props.compleletedCoursesData;\n    let interestsAreas = [];\n    ratedCourses = ratedCourses.filter(course => {\n      if (course.rating !== \"No Rating\" && course.rating > 2) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    console.log(ratedCourses);\n    ratedCourses.sort((x, y) => y.rating - x.rating);\n    console.log(ratedCourses);\n\n    for (let i = 0; i < ratedCourses.length; i++) {\n      //find interest areas\n      let interests = [];\n      interests = this.getInterests(ratedCourses[i]); //find courses with same interest areas\n\n      interests.forEach(interest => {\n        allCourses.forEach(course => {\n          //find interests of selected courses\n          let courseInterests = [];\n          courseInterests = this.getInterests(course); // if Rated course interest matches course interest\n\n          if (courseInterests.indexOf(interest) === -1) {\n            console.log(\"1\");\n          } else {\n            //check if course is in CompletedCourses\n            if (completedCourses.indexOf(course.number) === -1 && !this.state.recommendedCourses.indexOf(course)) {\n              //check if course is already there in recommended\n              course.interest = interest;\n              tempRecommended.push(course);\n            }\n          }\n        });\n      });\n    }\n\n    let temp = this.showCourses(tempRecommended);\n    return temp; //    ratedCourses.forEach((course) => interestsAreas.push(this.getInterests(course)));\n    //    //let temp=[];\n    //    allCourses.forEach((course)=>\n    //    {\n    //      let interests = this.getInterests(course);\n    //      if(interestsAreas.indexOf(course.subject)!== -1 && completedCourses.indexOf(course.number) === -1){\n    //         recommendedCoursesTemp.push(course);\n    //      }\n    //      interests.forEach((interest)=>{if(interestsAreas.indexOf(interest) !== -1 && completedCourses.indexOf(course.number) === -1){recommendedCoursesTemp.push(course);}})\n    //    })\n    //     if(this.state.recommendedCourses !== recommendedCoursesTemp){\n    //        this.setState({recommendedCourses:recommendedCoursesTemp})\n    //     }rec\n    //    console.log(recommendedCoursesTemp);\n    //    return recommendedCoursesTemp;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.getRecommended());\n  }\n\n}\n\nexport default Recommender;","map":{"version":3,"sources":["/Users/lakshaygoyal/Desktop/react2-alpha-lakshaygoyal 2/src/Recommender.js"],"names":["React","RecommendedCourse","Recommender","Component","constructor","props","state","recommendedCourses","getInterests","data","interests","push","i","length","keywords","forEach","keyword","indexOf","subject","showCourses","courses","temp","course","interest","getRecommended","tempRecommended","ratedCourses","allCourses","completedCourses","compleletedCoursesData","interestsAreas","filter","rating","console","log","sort","x","y","courseInterests","number","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport RecommendedCourse from'./RecommendedCourse';\n\nclass Recommender extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recommendedCourses:[],\n    }\n    // this.rating = React.createRef();\n  }\n\n  getInterests(data){\n    let interests = [];\n    interests.push(\"All\");\n\n    for(let i=0; i < data.length; i++){\n      data[i].keywords.forEach((keyword) => {\n        if(interests.indexOf(keyword) === -1)\n          interests.push(keyword);\n        })\n        if(interests.indexOf(data[i].subject) === -1)\n          interests.push(data[i].subject);\n      \n    }\n    \n    return interests;\n\n  }\n  showCourses(courses){\n    let temp = []\n    courses.forEach((course) => {\n      temp.push(<RecommendedCourse data={course} interest={course.interest}/>)\n    });\n    return temp\n  }\n\n    getRecommended(){\n           let tempRecommended=[];\n           let ratedCourses= this.props.ratedCourses;\n           let allCourses = this.props.allCourses;\n           let completedCourses = this.props.compleletedCoursesData;\n           let interestsAreas = [];\n    \n           ratedCourses= ratedCourses.filter((course)=> {\n             if(course.rating !==\"No Rating\" && course.rating > 2)\n             {return true;}\n             else\n             {return false;}});\n             console.log(ratedCourses);\n           ratedCourses.sort((x,y)=> y.rating-x.rating);\n           console.log(ratedCourses);\n\n           for(let i=0;i<ratedCourses.length;i++){\n            //find interest areas\n            let interests = []\n            interests = this.getInterests(ratedCourses[i])\n        \n            //find courses with same interest areas\n            interests.forEach((interest) => {\n              allCourses.forEach((course) => {\n        \n                //find interests of selected courses\n                let courseInterests = []\n                courseInterests = this.getInterests(course)\n                // if Rated course interest matches course interest\n                  if(courseInterests.indexOf(interest)=== -1){\n                    console.log(\"1\")\n                  }\n                  else{\n                    //check if course is in CompletedCourses\n                    if(completedCourses.indexOf(course.number) === -1&&!this.state.recommendedCourses.indexOf(course)){\n                        //check if course is already there in recommended\n                        course.interest = interest\n                      tempRecommended.push(course)\n        \n                    }\n                  }\n              });\n        \n            });\n        \n          }let temp =   this.showCourses(tempRecommended)\n          return temp\n          \n           \n        //    ratedCourses.forEach((course) => interestsAreas.push(this.getInterests(course)));\n        //    //let temp=[];\n        //    allCourses.forEach((course)=>\n        //    {\n        //      let interests = this.getInterests(course);\n        //      if(interestsAreas.indexOf(course.subject)!== -1 && completedCourses.indexOf(course.number) === -1){\n        //         recommendedCoursesTemp.push(course);\n        //      }\n        //      interests.forEach((interest)=>{if(interestsAreas.indexOf(interest) !== -1 && completedCourses.indexOf(course.number) === -1){recommendedCoursesTemp.push(course);}})\n             \n        //    })\n        //     if(this.state.recommendedCourses !== recommendedCoursesTemp){\n        //        this.setState({recommendedCourses:recommendedCoursesTemp})\n        //     }rec\n           \n        //    console.log(recommendedCoursesTemp);\n    \n        //    return recommendedCoursesTemp;\n    \n    }\n  \nrender(){\n    return(\n        <>\n        {this.getRecommended()}\n        </>\n\n    )\n}\n\n}\nexport default Recommender;"]},"metadata":{},"sourceType":"module"}